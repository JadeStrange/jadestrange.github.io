<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-06T11:35:44+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">骑着大鱼追月亮学习笔记</title><subtitle>个人网站</subtitle><author><name>骑着大鱼追月亮</name></author><entry><title type="html">git学习</title><link href="http://localhost:4000/git/2020/12/17/git-git/" rel="alternate" type="text/html" title="git学习" /><published>2020-12-17T00:00:00+08:00</published><updated>2020-12-17T00:00:00+08:00</updated><id>http://localhost:4000/git/2020/12/17/git-git</id><content type="html" xml:base="http://localhost:4000/git/2020/12/17/git-git/">&lt;h1 id=&quot;git命令&quot;&gt;git命令&lt;/h1&gt;

&lt;h2 id=&quot;命令行类似图形化显示提交记录&quot;&gt;命令行类似图形化显示提交记录&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-12-17-git-git/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;回退&quot;&gt;回退&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; new_name  &lt;span class=&quot;c&quot;&gt;# 备份&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 回到原先的分支，通过git log查看历史commit。&lt;/span&gt;
git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt; &amp;lt;commit id&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;不含&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;号&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>骑着大鱼追月亮</name></author><category term="git" /><summary type="html">git命令 命令行类似图形化显示提交记录 git log --oneline --all --graph 回退 git checkout -b new_name # 备份 git log --oneline --all --graph # 回到原先的分支，通过git log查看历史commit。 git reset --hard &amp;lt;commit id&amp;gt; (不含&amp;lt;&amp;gt;号)</summary></entry><entry><title type="html">K-means Python3实现</title><link href="http://localhost:4000/%E4%BD%9C%E4%B8%9A/2020/12/16/Kmeans-patternrecognition/" rel="alternate" type="text/html" title="K-means Python3实现" /><published>2020-12-16T00:00:00+08:00</published><updated>2020-12-16T00:00:00+08:00</updated><id>http://localhost:4000/%E4%BD%9C%E4%B8%9A/2020/12/16/Kmeans-patternrecognition</id><content type="html" xml:base="http://localhost:4000/%E4%BD%9C%E4%B8%9A/2020/12/16/Kmeans-patternrecognition/">&lt;!--&gt; more注释 --&gt;

&lt;h3 id=&quot;1-请简述-adaboost-算法的设计思想和主要计算步骤&quot;&gt;1. 请简述 adaboost 算法的设计思想和主要计算步骤。&lt;/h3&gt;

&lt;p&gt;设计思想：&lt;/p&gt;

&lt;p&gt;1.给定训练集，寻找比较粗糙的分类规则（弱分类器），要比寻找精确的分类规则要简单得多。&lt;/p&gt;

&lt;p&gt;2.提升算法的核心，从弱学习算法出发，反复学习，得到一系列弱分类器，然后组合这些弱分类器，构成一个强分类器。&lt;/p&gt;

&lt;p&gt;3.基本做法：改变训练数据的概率(权重)分布，针对不同的训练数据的分布，调用弱学习算法来学习一系列分类器。&lt;/p&gt;

&lt;p&gt;其中有两个关键实现：&lt;/p&gt;

&lt;p&gt;1.在每轮训练中，如何改变训练数据的权值或者分布？Adaboost提高那些前一轮弱分类器分错的样本的权重，降低已经被正确分类的样本的权重。错分的样本将在下一轮弱分类器中得到更多的关注。于是分类问题被一系列弱分类器分而治之。&lt;/p&gt;

&lt;p&gt;2.如何将一系列的弱分类器组合成一个强分类器？采用加权(多数)表决的方法。具体地，加大分类错误率较小的弱分类器的权重，使其在表决中起到更大作用。&lt;/p&gt;

&lt;p&gt;主要计算步骤：&lt;/p&gt;

&lt;p&gt;输入训练数据集：$T={(x_1,y_1), (x_2,y_2), .., (x_n, y_n) }$&lt;/p&gt;

&lt;p&gt;输入弱学习算法：&lt;/p&gt;

&lt;p&gt;​	（1）初始化数据训练权重分布$D_1={w_{11},w_{12}, .. w_{1n}}$&lt;/p&gt;

&lt;p&gt;​	（2）分别对m=1,2,…,M进行操作，练M个弱训练器&lt;/p&gt;

&lt;p&gt;​			（2a）$G_m(x):-&amp;gt;{-1, +1}$用权重分布$D_m$学习基本分类器&lt;/p&gt;

&lt;p&gt;​			（2b）计算$G_m(x)$上的分类错误率，加权$e_m=P(G_m(x)\neq y_i)=\sum_{i=1}^{n}w_{mi}I(G_m(x_i)\neq y_i)$&lt;/p&gt;

&lt;p&gt;​			（2c）计算$G_m(x)$贡献函数$\alpha_m=\frac{1}{2}ln\frac{1-e_m}{e_m}$&lt;/p&gt;

&lt;p&gt;​			（2d）更新$D_{m+1}$&lt;/p&gt;

&lt;p&gt;​	（3）构造基本线性组合$f(x)=\sum_{m=1}^M\alpha_mG_m(x)$，之后得到$G(x)=sign(f(x))$&lt;/p&gt;

&lt;h3 id=&quot;2-请从混合高斯密度函数估计的角度简述k-means聚类算法的原理请主要用文字描述-条理清晰请给出-k-means-聚类算法的计算步骤请说明哪些因素会影响-k-means-算-法的聚类性能&quot;&gt;2. 请从混合高斯密度函数估计的角度，简述K-Means聚类算法的原理(请主要用文字描述， 条理清晰)；请给出 K-Means 聚类算法的计算步骤；请说明哪些因素会影响 K-Means 算 法的聚类性能。&lt;/h3&gt;

&lt;p&gt;对于混合高斯密度函数估计引入如下假设：&lt;/p&gt;

&lt;p&gt;1.各类出现的先验概率均相等。&lt;/p&gt;

&lt;p&gt;2.每个样本点以概率为1属于一个类(后验概率0-1近似)；&lt;/p&gt;

&lt;p&gt;​计算数据点到类中心的欧氏距离的平方，即计算$||x_k-\hat\mu_i||$，寻找与样本$x_k$最近的类中心点，将$x_k$分给最近的类:&lt;/p&gt;

&lt;p&gt;​当$x_k距离\hat\mu_i最近时$$\hat P(\omega_i|x_k,\hat\theta) \approx1$，否则为0&lt;/p&gt;

&lt;p&gt;基于上述假设，对于c个高斯分布的均值，我们有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat \mu_i=\frac{\sum_{k=1}^{n}P(\omega_i|x_k,\hat\mu)x_k}{\sum_{k=1}^nP(\omega_i|x_k,\hat\mu)} = \frac{1}{n}\sum_{x_k \in \omega_i}x_k \ \ \ i=1,2,...,c&lt;/script&gt;

&lt;p&gt;但是，样本$x_k$最终得到$c$个高斯分布的均值之后，以这些均值作为c个类中心，计算每个样本点到类中心的欧氏距离，将样本点归入到距离最近的类，从而完成K_均值聚类工作。&lt;/p&gt;

&lt;p&gt;影响Kmeans算法性能的有聚类簇数量多少，初始点位置，数据中的噪声点、孤立点数量，数据簇形状等。&lt;/p&gt;

&lt;h3 id=&quot;3-请简述谱聚类算法的原理给出一种谱聚类算法经典算法shi-算法和-ng-算法之一-的计算步骤请指出哪些因素会影响聚类的性能&quot;&gt;3. 请简述谱聚类算法的原理，给出一种谱聚类算法（经典算法、Shi 算法和 Ng 算法之一） 的计算步骤；请指出哪些因素会影响聚类的性能。&lt;/h3&gt;

&lt;p&gt;原理：&lt;/p&gt;

&lt;p&gt;从图切割的角度，聚类就是要找到一种合理的分割图的方法，分割后能形成若干个子图。链接不同子图的边的权重尽可能小，子图内部边的权重尽可能大。&lt;/p&gt;

&lt;p&gt;谱聚类算法建立在图论中的谱图理论基础上，其本质是将聚类问题转化为一个图上的关于顶点划分的最优问题。建立在点对亲和性基础上，理论上能对任意分布形状的样本空间进行聚类。&lt;/p&gt;

&lt;p&gt;构造拉普拉斯矩阵L，图的连通子图与L矩阵特征值的关系如下，设G为一个具有非负连接权重的无向图，由图G导出的L的零特征值的重数等于G的连通子图的个数，但实际上，数据簇之间可能相互混杂重叠，所以L通常不具有分块形状（无论怎么调整顺序）因此，可以考察其中较小的几个特征值(k个)对应的特征向量。&lt;/p&gt;

&lt;p&gt;核心过程：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;利用点对之间的相似性，构造亲和度矩阵&lt;/li&gt;
  &lt;li&gt;构建拉普拉斯矩阵&lt;/li&gt;
  &lt;li&gt;求解拉普拉斯矩阵最小特征值对应的特征向量(通常会舍弃零特征所对应的分量全相等的特征向量)&lt;/li&gt;
  &lt;li&gt;有这些特征向量构成样本的新的特征，采用Kmeans等聚类方法完成最后的聚类。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ng算法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;输入，相似矩阵W，k个聚类簇&lt;/li&gt;
  &lt;li&gt;计算$L_{sym}=D^{-1/2}LD^{-1/2}$_&lt;/li&gt;
  &lt;li&gt;计算$L_{sym}$特征值最小的k个特征向量&lt;/li&gt;
  &lt;li&gt;让$U\in R^{n\times k}$包含所有这个k个特征向量。&lt;/li&gt;
  &lt;li&gt;从$U$构造矩阵$T\in R^{n\times k}$，normalizing每行到二范数为1，让$t_{ij}=\frac{u_{ij}}{\sqrt{\sum_{m=1}^nu_{im}^2}}$&lt;/li&gt;
  &lt;li&gt;让每行作为一个样本&lt;/li&gt;
  &lt;li&gt;对其进行Kmeans聚类得到$A_1,A_2,…,A_k$&lt;/li&gt;
  &lt;li&gt;输出$A_1,A_2,…,A_k$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;影响聚类性能的因素：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;选择的k的数量，即选择特征向量的数量。&lt;/li&gt;
  &lt;li&gt;亲和度矩阵的构建方式&lt;/li&gt;
  &lt;li&gt;最后进行聚类所选择的方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;第二部分计算机编程&quot;&gt;第二部分：计算机编程&lt;/h2&gt;

&lt;h3 id=&quot;1现有-1000-个二维空间的数据点可以采用如下-matlab-代码来生成&quot;&gt;1．现有 1000 个二维空间的数据点，可以采用如下 MATLAB 代码来生成：&lt;/h3&gt;

&lt;p&gt;在运行完上述代码之后，可以获得 1000 个数据点，它们存储于矩阵X之中。X 是一个行数为 1000列数为2的矩阵。即是说，矩阵X 的每一行为一个数据点。另外，从上述 MATLAB 中可见，各真实分布的均值向量分别为 mu1, mu2, mu3, mu4, mu5。 提示：在实验中，生成一个数据矩阵X之后，就将其固定。后续实验均用此数据集，以便于分析算法。&lt;/p&gt;

&lt;h3 id=&quot;1-编写一个程序实现经典的-k-均值聚类算法&quot;&gt;(1). 编写一个程序，实现经典的 K-均值聚类算法；&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kmeans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    kmeans
    :param cluster_n: 分类数量
    :param X: 特征
    :return:
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 加载数据&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 初始化&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cluster_center_point_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cluster_center_point_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 循环&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;label_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;norm2_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_center_point_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster_i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;temp_cluster_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm2_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;label_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp_cluster_id&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;new_cluster_center_point_sum_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_cluster_center_point_num_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_cluster_center_point_sum_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cluster_center_point_sum_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_cluster_center_point_num_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;new_cluster_center_point_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster_center_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster_center_point&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_cluster_center_point_sum_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cluster_center_point_num_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_center_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cluster_center_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster_center_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cluster_center_point_num_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_center_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_cluster_center_point_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_center_point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;cluster_point_equal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cluster_center_point&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_cluster_center_point_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cluster_center_point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster_center_point_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; \
                    &lt;span class=&quot;n&quot;&gt;new_cluster_center_point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster_center_point_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cluster_point_equal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster_point_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cluster_center_point_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cluster_center_point_list&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;epoch:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster_center_point_list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2令聚类个数等于-5采用不同的初始值报告聚类精度以及最后获得的聚类中心-并计算所获得的聚类中心与对应的真实分布的均值之间的误差&quot;&gt;(2)令聚类个数等于 5，采用不同的初始值，报告聚类精度、以及最后获得的聚类中心， 并计算所获得的聚类中心与对应的真实分布的均值之间的误差。&lt;/h3&gt;

&lt;p&gt;较好的情况，随机初始值1：&lt;/p&gt;

&lt;p&gt;迭代次数epoch: 5
准确率Homogeneity: 0.969
聚类中心 [array([1.01415941, 3.96384996]), array([ 9.05324946, -0.04146593]), array([ 5.4918652 , -4.40789589]), array([6.12513501, 4.51401558]), array([ 1.12994159, -1.06260689])]
聚类中心与真值均值之间的误差: 0.013&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;D:\Desktop\模式识别第五次作业\Kmeans_results_1.png&quot; style=&quot;zoom:72%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;较差的一个聚类情况，随机初始值2：&lt;/p&gt;

&lt;p&gt;epoch: 13
Homogeneity: 0.767
聚类中心 [array([ 5.32243428, -4.32696178]), array([9.06047487, 0.70167894]), array([5.80683471, 4.56049797]), array([ 9.00073177, -1.24803554]), array([0.94192585, 1.36741968])]
聚类中心与真值均值之间的误差: 1.252&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;D:\Desktop\模式识别第五次作业\Kmeans_results_2.png&quot; alt=&quot;f&quot; style=&quot;zoom:72%;&quot; /&gt;&lt;/p&gt;</content><author><name>骑着大鱼追月亮</name></author><category term="聚类" /><summary type="html">1. 请简述 adaboost 算法的设计思想和主要计算步骤。 设计思想： 1.给定训练集，寻找比较粗糙的分类规则（弱分类器），要比寻找精确的分类规则要简单得多。 2.提升算法的核心，从弱学习算法出发，反复学习，得到一系列弱分类器，然后组合这些弱分类器，构成一个强分类器。 3.基本做法：改变训练数据的概率(权重)分布，针对不同的训练数据的分布，调用弱学习算法来学习一系列分类器。 其中有两个关键实现： 1.在每轮训练中，如何改变训练数据的权值或者分布？Adaboost提高那些前一轮弱分类器分错的样本的权重，降低已经被正确分类的样本的权重。错分的样本将在下一轮弱分类器中得到更多的关注。于是分类问题被一系列弱分类器分而治之。 2.如何将一系列的弱分类器组合成一个强分类器？采用加权(多数)表决的方法。具体地，加大分类错误率较小的弱分类器的权重，使其在表决中起到更大作用。 主要计算步骤： 输入训练数据集：$T={(x_1,y_1), (x_2,y_2), .., (x_n, y_n) }$ 输入弱学习算法： ​ （1）初始化数据训练权重分布$D_1={w_{11},w_{12}, .. w_{1n}}$ ​ （2）分别对m=1,2,…,M进行操作，练M个弱训练器 ​ （2a）$G_m(x):-&amp;gt;{-1, +1}$用权重分布$D_m$学习基本分类器 ​ （2b）计算$G_m(x)$上的分类错误率，加权$e_m=P(G_m(x)\neq y_i)=\sum_{i=1}^{n}w_{mi}I(G_m(x_i)\neq y_i)$ ​ （2c）计算$G_m(x)$贡献函数$\alpha_m=\frac{1}{2}ln\frac{1-e_m}{e_m}$ ​ （2d）更新$D_{m+1}$ ​ （3）构造基本线性组合$f(x)=\sum_{m=1}^M\alpha_mG_m(x)$，之后得到$G(x)=sign(f(x))$ 2. 请从混合高斯密度函数估计的角度，简述K-Means聚类算法的原理(请主要用文字描述， 条理清晰)；请给出 K-Means 聚类算法的计算步骤；请说明哪些因素会影响 K-Means 算 法的聚类性能。 对于混合高斯密度函数估计引入如下假设： 1.各类出现的先验概率均相等。 2.每个样本点以概率为1属于一个类(后验概率0-1近似)； ​计算数据点到类中心的欧氏距离的平方，即计算$||x_k-\hat\mu_i||$，寻找与样本$x_k$最近的类中心点，将$x_k$分给最近的类: ​当$x_k距离\hat\mu_i最近时$$\hat P(\omega_i|x_k,\hat\theta) \approx1$，否则为0 基于上述假设，对于c个高斯分布的均值，我们有： 但是，样本$x_k$最终得到$c$个高斯分布的均值之后，以这些均值作为c个类中心，计算每个样本点到类中心的欧氏距离，将样本点归入到距离最近的类，从而完成K_均值聚类工作。 影响Kmeans算法性能的有聚类簇数量多少，初始点位置，数据中的噪声点、孤立点数量，数据簇形状等。 3. 请简述谱聚类算法的原理，给出一种谱聚类算法（经典算法、Shi 算法和 Ng 算法之一） 的计算步骤；请指出哪些因素会影响聚类的性能。 原理： 从图切割的角度，聚类就是要找到一种合理的分割图的方法，分割后能形成若干个子图。链接不同子图的边的权重尽可能小，子图内部边的权重尽可能大。 谱聚类算法建立在图论中的谱图理论基础上，其本质是将聚类问题转化为一个图上的关于顶点划分的最优问题。建立在点对亲和性基础上，理论上能对任意分布形状的样本空间进行聚类。 构造拉普拉斯矩阵L，图的连通子图与L矩阵特征值的关系如下，设G为一个具有非负连接权重的无向图，由图G导出的L的零特征值的重数等于G的连通子图的个数，但实际上，数据簇之间可能相互混杂重叠，所以L通常不具有分块形状（无论怎么调整顺序）因此，可以考察其中较小的几个特征值(k个)对应的特征向量。 核心过程： 利用点对之间的相似性，构造亲和度矩阵 构建拉普拉斯矩阵 求解拉普拉斯矩阵最小特征值对应的特征向量(通常会舍弃零特征所对应的分量全相等的特征向量) 有这些特征向量构成样本的新的特征，采用Kmeans等聚类方法完成最后的聚类。 Ng算法： 输入，相似矩阵W，k个聚类簇 计算$L_{sym}=D^{-1/2}LD^{-1/2}$_ 计算$L_{sym}$特征值最小的k个特征向量 让$U\in R^{n\times k}$包含所有这个k个特征向量。 从$U$构造矩阵$T\in R^{n\times k}$，normalizing每行到二范数为1，让$t_{ij}=\frac{u_{ij}}{\sqrt{\sum_{m=1}^nu_{im}^2}}$ 让每行作为一个样本 对其进行Kmeans聚类得到$A_1,A_2,…,A_k$ 输出$A_1,A_2,…,A_k$ 影响聚类性能的因素： 选择的k的数量，即选择特征向量的数量。 亲和度矩阵的构建方式 最后进行聚类所选择的方法。 第二部分：计算机编程 1．现有 1000 个二维空间的数据点，可以采用如下 MATLAB 代码来生成： 在运行完上述代码之后，可以获得 1000 个数据点，它们存储于矩阵X之中。X 是一个行数为 1000列数为2的矩阵。即是说，矩阵X 的每一行为一个数据点。另外，从上述 MATLAB 中可见，各真实分布的均值向量分别为 mu1, mu2, mu3, mu4, mu5。 提示：在实验中，生成一个数据矩阵X之后，就将其固定。后续实验均用此数据集，以便于分析算法。 (1). 编写一个程序，实现经典的 K-均值聚类算法； def kmeans(cluster_n, X): &quot;&quot;&quot; kmeans :param cluster_n: 分类数量 :param X: 特征 :return: &quot;&quot;&quot; # 加载数据 temp_max = np.max(X, axis=0) temp_min = np.min(X, axis=0) # 初始化 cluster_center_point_list = [] for i in range(cluster_n): x = random.uniform(temp_min[0], temp_max[0]) y = random.uniform(temp_min[1], temp_max[1]) cluster_center_point_list.append(np.array([x, y])) # 循环 label_array = np.ones(X.shape[0], dtype=np.int) * (-1) epoch = 0 while True: epoch += 1 for i in range(X.shape[0]): norm2_list = np.array([np.linalg.norm(cluster_center_point_list[cluster_i] - X[i], 2) for cluster_i in range(cluster_n)]) temp_cluster_id = norm2_list.argmin() label_array[i] = temp_cluster_id new_cluster_center_point_sum_list = [np.array([0.0, 0.0]) for _ in range(cluster_n)] new_cluster_center_point_num_list = [0 for _ in range(cluster_n)] for data_id, label_id in enumerate(label_array): new_cluster_center_point_sum_list[label_id] = new_cluster_center_point_sum_list[label_id] + X[ data_id] new_cluster_center_point_num_list[label_id] += 1 new_cluster_center_point_list = [] for cluster_center_id, cluster_center_point in enumerate(new_cluster_center_point_sum_list): if new_cluster_center_point_num_list[cluster_center_id] != 0: cluster_center_point = cluster_center_point / new_cluster_center_point_num_list[cluster_center_id] new_cluster_center_point_list.append(cluster_center_point) cluster_point_equal = True for cluster_id, new_cluster_center_point in enumerate(new_cluster_center_point_list): if new_cluster_center_point[0] != cluster_center_point_list[cluster_id][0] and \ new_cluster_center_point[1] != cluster_center_point_list[cluster_id][1]: cluster_point_equal = False break if cluster_point_equal: break else: cluster_center_point_list = new_cluster_center_point_list print(&quot;epoch:&quot;, epoch) return label_array, cluster_center_point_list (2)令聚类个数等于 5，采用不同的初始值，报告聚类精度、以及最后获得的聚类中心， 并计算所获得的聚类中心与对应的真实分布的均值之间的误差。 较好的情况，随机初始值1： 迭代次数epoch: 5 准确率Homogeneity: 0.969 聚类中心 [array([1.01415941, 3.96384996]), array([ 9.05324946, -0.04146593]), array([ 5.4918652 , -4.40789589]), array([6.12513501, 4.51401558]), array([ 1.12994159, -1.06260689])] 聚类中心与真值均值之间的误差: 0.013 较差的一个聚类情况，随机初始值2： epoch: 13 Homogeneity: 0.767 聚类中心 [array([ 5.32243428, -4.32696178]), array([9.06047487, 0.70167894]), array([5.80683471, 4.56049797]), array([ 9.00073177, -1.24803554]), array([0.94192585, 1.36741968])] 聚类中心与真值均值之间的误差: 1.252</summary></entry><entry><title type="html">骑着大鱼追月亮学习记录测试</title><link href="http://localhost:4000/%E6%B5%8B%E8%AF%95tutorial/tutorial/2020/12/15/markdowntest-test/" rel="alternate" type="text/html" title="骑着大鱼追月亮学习记录测试" /><published>2020-12-15T00:00:00+08:00</published><updated>2020-12-15T00:00:00+08:00</updated><id>http://localhost:4000/%E6%B5%8B%E8%AF%95tutorial/tutorial/2020/12/15/markdowntest-test</id><content type="html" xml:base="http://localhost:4000/%E6%B5%8B%E8%AF%95tutorial/tutorial/2020/12/15/markdowntest-test/">&lt;blockquote&gt;
  &lt;p&gt;&amp;gt;按钮可以出标题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--&gt; more注释 --&gt;

&lt;p&gt;&lt;a href=&quot;127.0.0.1&quot;&gt;链接测试&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;星号
&lt;img src=&quot;http://iissnan.com/nexus/next/desktop-preview.png&quot; alt=&quot;Desktop Preview&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sidebar&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://iissnan.com/nexus/next/desktop-sidebar-preview.png&quot; alt=&quot;Desktop Sidebar Preview&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sidebar (Post details page)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://iissnan.com/nexus/next/desktop-sidebar-toc.png&quot; alt=&quot;Desktop Sidebar Preview&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mobile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://iissnan.com/nexus/next/mobile.png&quot; alt=&quot;Mobile Preview&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Check whether you have &lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby 2.1.0&lt;/code&gt; or higher installed:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;'''sh
gem install bundler
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>骑着大鱼追月亮</name></author><category term="tag1" /><summary type="html">&amp;gt;按钮可以出标题 链接测试 Screenshots 星号 Sidebar Sidebar (Post details page) Mobile Installation Check whether you have Ruby 2.1.0 or higher installed: '''sh gem install bundler '''</summary></entry></feed>